"use strict";function deepCopy(e,t=!0){let n;if(!t)return shallowCopy(e);if(!e||isReferenceToImmutable(e))return e;const o=objectType(e);return n=objectBehaviors[o].makeNew(e),objectBehaviors[o].mayDeepCopy&&traverse(e,n),n}function shallowCopy(e){const t=objectType(e);return(0,objectBehaviors[t].makeShallow)(e)}function traverse(e,t){const n=objectType(e);if(!objectBehaviors[n].mayDeepCopy)return;const o=objectBehaviors[n].keyVals(e),a=objectBehaviors[n].addElement;o.forEach(e=>{const{key:n,value:o,descriptor:r}=e,s=objectType(o),c=objectBehaviors[s].mayDeepCopy?objectBehaviors[s].makeNew(o):objectBehaviors[s].makeShallow(o);a(t,n,c,r),traverse(o,c)})}function objectType(e){return isArray(e)?"array":isDate(e)?"date":isMap(e)?"map":isSet(e)?"set":isFunction(e)?"function":isObject(e)?"object":"unknown"}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=deepCopy;const objectBehaviors={array:{addElement:(e,t,n)=>Array.prototype.push.call(e,n),makeNew:e=>{const t=[];return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),t},makeShallow:e=>{const t=[...e];return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),t},keyVals:e=>{let t=[];return e.forEach((e,n)=>{t.push({key:n,value:e})}),t},mayDeepCopy:!0},date:{addElement:()=>{},makeNew:e=>new Date(e.getTime()),makeShallow:e=>new Date(e.getTime()),keyVals:()=>null,mayDeepCopy:!1},map:{addElement:(e,t,n)=>e.set(t,n),makeNew:()=>new Map,makeShallow:e=>new Map(e),keyVals:e=>{let t=[];return e.forEach((n,o)=>{t.push({key:o,value:e.get(o)})}),t},mayDeepCopy:!0},set:{addElement:(e,t,n)=>e.add(n),makeNew:()=>new Set,makeShallow:e=>new Set(e),keyVals:e=>{let t=[];return e.forEach(e=>{t.push({key:null,value:e})}),t},mayDeepCopy:!0},function:{addElement:(e,t,n)=>{console.error(`ERORR "function" addElement (function has no elements) key ="${t}"`)},makeNew:e=>e,makeShallow:e=>e,keyVals:()=>null,mayDeepCopy:!1},object:{addElement:(e,t,n,o=null)=>{o?Object.defineProperty(e,t,{...o,value:n}):Object.defineProperty(e,t,{value:n})},makeNew:e=>{const t={};return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),t},makeShallow:e=>{const t=Object.assign({},e);return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),t},keyVals:e=>{let t=[];return Object.getOwnPropertyNames(e).forEach(n=>{const o=Object.getOwnPropertyDescriptor(e,n),a=o.value;t.push({key:n,value:a,descriptor:o})}),t},mayDeepCopy:!0},unknown:{addElement:()=>{},makeNew:e=>e,makeShallow:e=>e,keyVals:()=>[],mayDeepCopy:!1}};function isPrimitive(e){let t=typeof e;return"number"===t||"string"===t||"boolean"===t||"undefined"===t||"bigint"===t||"symbol"===t||null===e}function isRegExp(e){return e&&e instanceof RegExp}function isDate(e){return e&&e instanceof Date}function isFunction(e){return e&&e instanceof Function}function isArray(e){return e&&e instanceof Array}function isMap(e){return e&&e instanceof Map}function isWeakMap(e){return e&&e instanceof WeakMap}function isSet(e){return e&&e instanceof Set}function isWeakSet(e){return e&&e instanceof WeakSet}function isObject(e){return e&&e instanceof Object}function isReferenceToImmutable(e){return isPrimitive(e)||isFunction(e)||isRegExp(e)||isWeakMap(e)||isWeakSet(e)}