const objectBehaviors={},isPrimitive=e=>{let a=typeof e;return"number"===a||"string"===a||"boolean"===a||"undefined"===a||"bigint"===a||"symbol"===a||null===e},objectType=e=>{if(isPrimitive(e)||!(e instanceof Object))return"primitive";const a=e.constructor&&e.constructor.name&&e.constructor.name.toLowerCase();if("string"==typeof a&&a.length&&objectBehaviors[a])return a;let t;for(const a in objectBehaviors)if(!(t=objectBehaviors[a].type)||e instanceof t)return a;return"unknown"},arrayAddElement=(e,a,t)=>Array.prototype.push.call(e,t),arrayMakeEmpty=e=>{const a=[];return Object.setPrototypeOf(a,Object.getPrototypeOf(e)),a},arrayMakeShallow=e=>{const a=[...e];return Object.setPrototypeOf(a,Object.getPrototypeOf(e)),a},arrayIterate=(e,a,t)=>{const r=e.length;for(let a=0;a<r;a++){const r=e[a];t({key:a,value:r,type:objectType(r)})}},addArrayBehavior=()=>{Object.assign(objectBehaviors,{array:{type:Array,mayDeepCopy:!0,addElement:arrayAddElement,makeEmpty:arrayMakeEmpty,makeShallow:arrayMakeShallow,iterate:arrayIterate}})},addDateBehavior=()=>{Object.assign(objectBehaviors,{date:{type:Date,makeShallow:e=>new Date(e.getTime())}})},addRegExpBehavior=()=>{Object.assign(objectBehaviors,{regexp:{type:RegExp,makeShallow:e=>new RegExp(e)}})},addFunctionBehavior=()=>{Object.assign(objectBehaviors,{function:{type:Function,makeShallow:e=>e}})},addErrorBehavior=()=>{Object.assign(objectBehaviors,{error:{type:Error,makeShallow:e=>{const a=new Error(e.message);return a.stack=e.stack,a}}})},addTypedArrayBehavior=e=>{let a="undefined"!=typeof global&&global[e]||"undefined"!=typeof window&&window[e]||"undefined"!=typeof WorkerGlobalScope&&WorkerGlobalScope[e];void 0!==a&&(objectBehaviors[e.toLowerCase()]={type:a,makeShallow:e=>a.from(e)})},addAllTypedArrayBehaviors=()=>{["Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Int32Array","Uint32Array","Float32Array","Float32Array","Float64Array","BigInt64Array","BigUint64Array"].forEach(e=>addTypedArrayBehavior(e))},addArrayBufferBehavior=()=>{"undefined"!=typeof ArrayBuffer&&Object.assign(objectBehaviors,{arraybuffer:{type:ArrayBuffer,makeShallow:e=>e.slice(0)}})},addMapBehavior=()=>{"undefined"!=typeof Map&&Object.assign(objectBehaviors,{map:{type:Map,mayDeepCopy:!0,addElement:(e,a,t)=>e.set(a,t),makeEmpty:()=>new Map,makeShallow:e=>new Map(e),iterate:(e,a,t)=>{e.forEach((e,a)=>{const r={key:a,value:e,type:objectType(e)};t(r)})}}})},addSetBehavior=()=>{"undefined"!=typeof Set&&Object.assign(objectBehaviors,{set:{type:Set,mayDeepCopy:!0,addElement:(e,a,t)=>e.add(t),makeEmpty:()=>new Set,makeShallow:e=>new Set(e),iterate:(e,a,t)=>{e.forEach(e=>{const a={key:null,value:e,type:objectType(e)};t(a)})}}})},addWeakSetBehavior=()=>{"undefined"!=typeof WeakSet&&Object.assign(objectBehaviors,{weakset:{type:WeakSet,makeShallow:e=>e}})},addWeakMapBehavior=()=>{"undefined"!=typeof WeakMap&&Object.assign(objectBehaviors,{weakmap:{type:WeakMap,makeShallow:e=>e}})},addBufferBehavior=()=>{"undefined"!=typeof Buffer&&Object.assign(objectBehaviors,{buffer:{type:Buffer,makeShallow:e=>Buffer.from(e)}})},objectAddElement=(e,a,t,r)=>{r?Object.defineProperty(e,a,r):e[a]=t},objectMakeEmpty=e=>{const a={};return Object.setPrototypeOf(a,Object.getPrototypeOf(e)),a},objectMakeShallow=e=>{const a=Object.assign({},e);return Object.setPrototypeOf(a,Object.getPrototypeOf(e)),a},objectIterate=(e,a,t)=>{const r=a?Object.getOwnPropertyNames(e):Object.keys(e),o=r.length;for(let n=0;n<o;n++){const o=r[n],y=e[o],i={key:o,value:y,type:objectType(y)};a&&!e.propertyIsEnumerable(o)&&(i.descriptor=Object.getOwnPropertyDescriptor(e,o)),t(i)}},addObjectBehavior=()=>{Object.assign(objectBehaviors,{object:{type:Object,mayDeepCopy:!0,addElement:objectAddElement,makeEmpty:objectMakeEmpty,makeShallow:objectMakeShallow,iterate:objectIterate}})},addUnknownAndPrimitive=()=>{Object.assign(objectBehaviors,{unknown:{makeShallow:e=>e},primitive:{makeShallow:e=>e}})};Object.assign(objectBehaviors,{array:{type:Array,mayDeepCopy:!0,addElement:arrayAddElement,makeEmpty:arrayMakeEmpty,makeShallow:arrayMakeShallow,iterate:arrayIterate}}),Object.assign(objectBehaviors,{date:{type:Date,makeShallow:e=>new Date(e.getTime())}}),Object.assign(objectBehaviors,{regexp:{type:RegExp,makeShallow:e=>new RegExp(e)}}),Object.assign(objectBehaviors,{function:{type:Function,makeShallow:e=>e}}),Object.assign(objectBehaviors,{error:{type:Error,makeShallow:e=>{const a=new Error(e.message);return a.stack=e.stack,a}}}),["Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Int32Array","Uint32Array","Float32Array","Float32Array","Float64Array","BigInt64Array","BigUint64Array"].forEach(e=>addTypedArrayBehavior(e)),"undefined"!=typeof ArrayBuffer&&Object.assign(objectBehaviors,{arraybuffer:{type:ArrayBuffer,makeShallow:e=>e.slice(0)}}),"undefined"!=typeof Map&&Object.assign(objectBehaviors,{map:{type:Map,mayDeepCopy:!0,addElement:(e,a,t)=>e.set(a,t),makeEmpty:()=>new Map,makeShallow:e=>new Map(e),iterate:(e,a,t)=>{e.forEach((e,a)=>{const r={key:a,value:e,type:objectType(e)};t(r)})}}}),"undefined"!=typeof Set&&Object.assign(objectBehaviors,{set:{type:Set,mayDeepCopy:!0,addElement:(e,a,t)=>e.add(t),makeEmpty:()=>new Set,makeShallow:e=>new Set(e),iterate:(e,a,t)=>{e.forEach(e=>{const a={key:null,value:e,type:objectType(e)};t(a)})}}}),"undefined"!=typeof WeakSet&&Object.assign(objectBehaviors,{weakset:{type:WeakSet,makeShallow:e=>e}}),"undefined"!=typeof WeakMap&&Object.assign(objectBehaviors,{weakmap:{type:WeakMap,makeShallow:e=>e}}),"undefined"!=typeof Buffer&&Object.assign(objectBehaviors,{buffer:{type:Buffer,makeShallow:e=>Buffer.from(e)}}),Object.assign(objectBehaviors,{object:{type:Object,mayDeepCopy:!0,addElement:objectAddElement,makeEmpty:objectMakeEmpty,makeShallow:objectMakeShallow,iterate:objectIterate}}),Object.assign(objectBehaviors,{unknown:{makeShallow:e=>e},primitive:{makeShallow:e=>e}}),module.exports=[isPrimitive,objectType,objectBehaviors];