
deepCopy tests...
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:09.728Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:09.728Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:09.729Z 
    dest7: 2020-08-05T00:17:09.729Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 18 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:09.742Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:09.742Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:09.742Z 
    dest7: 2020-08-05T00:17:09.742Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 3 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:09.746Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:09.746Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:09.746Z 
    dest7: 2020-08-05T00:17:09.746Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 3 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:09.749Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:09.749Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:09.749Z 
    dest7: 2020-08-05T00:17:09.749Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 6 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:09.755Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:09.755Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:09.755Z 
    dest7: 2020-08-05T00:17:09.755Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 4 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:09.758Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:09.758Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:09.760Z 
    dest7: 2020-08-05T00:17:09.760Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 24 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:09.786Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:09.786Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:09.787Z 
    dest7: 2020-08-05T00:17:09.787Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 10 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:09.794Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:09.794Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:09.795Z 
    dest7: 2020-08-05T00:17:09.795Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 27 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:09.823Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:09.823Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:09.825Z 
    dest7: 2020-08-05T00:17:09.825Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 9 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:09.831Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:09.831Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:09.832Z 
    dest7: 2020-08-05T00:17:09.832Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 22 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:09.853Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:09.853Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:09.856Z 
    dest7: 2020-08-05T00:17:09.856Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 22 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:09.874Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:09.874Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:09.874Z 
    dest7: 2020-08-05T00:17:09.874Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 5 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:09.880Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:09.880Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:09.882Z 
    dest7: 2020-08-05T00:17:09.882Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 27 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:09.912Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:09.912Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:09.912Z 
    dest7: 2020-08-05T00:17:09.912Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 26 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:09.932Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:09.932Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:09.933Z 
    dest7: 2020-08-05T00:17:09.933Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 37 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:09.970Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:09.970Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:09.970Z 
    dest7: 2020-08-05T00:17:09.970Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 63 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:10.043Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:10.043Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:10.043Z 
    dest7: 2020-08-05T00:17:10.043Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 37 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:10.092Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:10.092Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:10.102Z 
    dest7: 2020-08-05T00:17:10.102Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 74 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:10.147Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:10.147Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:10.147Z 
    dest7: 2020-08-05T00:17:10.147Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 5 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:10.150Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:10.150Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:10.151Z 
    dest7: 2020-08-05T00:17:10.151Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 3 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:10.154Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:10.154Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:10.154Z 
    dest7: 2020-08-05T00:17:10.154Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 4 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:10.157Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:10.157Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:10.158Z 
    dest7: 2020-08-05T00:17:10.158Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 4 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:10.163Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:10.163Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:10.164Z 
    dest7: 2020-08-05T00:17:10.164Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 5 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:10.169Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:10.169Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:10.169Z 
    dest7: 2020-08-05T00:17:10.169Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 13 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:10.199Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:10.199Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:10.202Z 
    dest7: 2020-08-05T00:17:10.202Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 35 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:10.224Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:10.224Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:10.227Z 
    dest7: 2020-08-05T00:17:10.227Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 30 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:10.246Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:10.246Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:10.247Z 
    dest7: 2020-08-05T00:17:10.247Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 21 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:10.277Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:10.277Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:10.280Z 
    dest7: 2020-08-05T00:17:10.280Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 17 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:10.307Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:10.307Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:10.310Z 
    dest7: 2020-08-05T00:17:10.310Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 33 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:10.347Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:10.347Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:10.349Z 
    dest7: 2020-08-05T00:17:10.349Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 38 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:10.377Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:10.377Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:10.382Z 
    dest7: 2020-08-05T00:17:10.382Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 33 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:10.392Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:10.392Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:10.392Z 
    dest7: 2020-08-05T00:17:10.392Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 31 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:10.426Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:10.426Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:10.427Z 
    dest7: 2020-08-05T00:17:10.427Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 23 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:10.456Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:10.456Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:10.457Z 
    dest7: 2020-08-05T00:17:10.457Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 22 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:10.478Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:10.478Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:10.481Z 
    dest7: 2020-08-05T00:17:10.481Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 35 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:10.502Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:10.502Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:10.505Z 
    dest7: 2020-08-05T00:17:10.505Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 22 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:10.535Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:10.535Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:10.538Z 
    dest7: 2020-08-05T00:17:10.538Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 36 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:10.572Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:10.572Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:10.572Z 
    dest7: 2020-08-05T00:17:10.572Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 34 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:10.596Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:10.596Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:10.600Z 
    dest7: 2020-08-05T00:17:10.600Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 32 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:10.638Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:10.638Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:10.643Z 
    dest7: 2020-08-05T00:17:10.643Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 24 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:10.658Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:10.658Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:10.664Z 
    dest7: 2020-08-05T00:17:10.664Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 36 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:10.694Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:10.694Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:10.695Z 
    dest7: 2020-08-05T00:17:10.695Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 34 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:10.729Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:10.729Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:10.729Z 
    dest7: 2020-08-05T00:17:10.729Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 24 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:10.764Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:10.764Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:10.765Z 
    dest7: 2020-08-05T00:17:10.765Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 34 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:10.799Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:10.799Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:10.800Z 
    dest7: 2020-08-05T00:17:10.800Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 25 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:10.818Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:10.818Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:10.820Z 
    dest7: 2020-08-05T00:17:10.820Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 28 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:10.838Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:10.838Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:10.839Z 
    dest7: 2020-08-05T00:17:10.839Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 15 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:10.860Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:10.860Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:10.864Z 
    dest7: 2020-08-05T00:17:10.864Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 21 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:10.876Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:10.876Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:10.876Z 
    dest7: 2020-08-05T00:17:10.876Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 2 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:10.888Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:10.888Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:10.896Z 
    dest7: 2020-08-05T00:17:10.896Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 35 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:10.912Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:10.912Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:10.913Z 
    dest7: 2020-08-05T00:17:10.913Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 38 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:10.963Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:10.963Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:10.967Z 
    dest7: 2020-08-05T00:17:10.967Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 46 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:10.999Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:10.999Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:11.002Z 
    dest7: 2020-08-05T00:17:11.002Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 10 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:11.031Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:11.031Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:11.032Z 
    dest7: 2020-08-05T00:17:11.032Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 47 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:11.058Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:11.058Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:11.069Z 
    dest7: 2020-08-05T00:17:11.069Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 24 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:11.078Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:11.078Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:11.079Z 
    dest7: 2020-08-05T00:17:11.079Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 16 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:11.110Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:11.110Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:11.112Z 
    dest7: 2020-08-05T00:17:11.112Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 28 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:11.137Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:11.137Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:11.144Z 
    dest7: 2020-08-05T00:17:11.144Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 32 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:11.185Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:11.185Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:11.189Z 
    dest7: 2020-08-05T00:17:11.189Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 21 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:11.191Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:11.191Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:11.192Z 
    dest7: 2020-08-05T00:17:11.192Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 17 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:11.210Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:11.210Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:11.212Z 
    dest7: 2020-08-05T00:17:11.212Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 18 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:11.227Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:11.227Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:11.228Z 
    dest7: 2020-08-05T00:17:11.228Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 10 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:11.236Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:11.236Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:11.236Z 
    dest7: 2020-08-05T00:17:11.236Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 2 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:11.238Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:11.238Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:11.238Z 
    dest7: 2020-08-05T00:17:11.238Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 29 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:11.266Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:11.266Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:11.266Z 
    dest7: 2020-08-05T00:17:11.266Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 10 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:11.281Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:11.281Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:11.284Z 
    dest7: 2020-08-05T00:17:11.284Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 12 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:11.305Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:11.305Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:11.306Z 
    dest7: 2020-08-05T00:17:11.306Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 23 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:11.312Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:11.312Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:11.312Z 
    dest7: 2020-08-05T00:17:11.312Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 9 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:11.328Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:11.328Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:11.329Z 
    dest7: 2020-08-05T00:17:11.329Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 19 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:11.341Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:11.341Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:11.342Z 
    dest7: 2020-08-05T00:17:11.342Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 19 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:11.369Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:11.369Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:11.374Z 
    dest7: 2020-08-05T00:17:11.374Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 22 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:11.383Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:11.383Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:11.383Z 
    dest7: 2020-08-05T00:17:11.383Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 4 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:11.385Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:11.385Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:11.385Z 
    dest7: 2020-08-05T00:17:11.385Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 9 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:11.400Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:11.400Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:11.401Z 
    dest7: 2020-08-05T00:17:11.401Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 21 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:11.419Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:11.419Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:11.420Z 
    dest7: 2020-08-05T00:17:11.420Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 5 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:11.422Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:11.422Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:11.422Z 
    dest7: 2020-08-05T00:17:11.422Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 5 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:11.431Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:11.431Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:11.432Z 
    dest7: 2020-08-05T00:17:11.432Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 23 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:11.452Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:11.452Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:11.453Z 
    dest7: 2020-08-05T00:17:11.453Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 7 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:11.458Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:11.458Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:11.458Z 
    dest7: 2020-08-05T00:17:11.458Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 2 milliseconds
DEEP is set to true

Test 1:
  let src = [1,2,3,[[[[[4,5]]]]]];
  let dest = deepCopy(src, true);
  dest[2] = 30000;
    src:  [1,2,3,[[[[[4,5]]]]]] 
    dest: [1,2,30000,[[[[[4,5]]]]]]

Test 2:
  let src2 = ["a", 42, {name: "terry", age: "old", hobbies: ["sleeping", "eating"]}];
  let dest2 = deepCopy(src2, true);
  dest2[2].age = "secret";
  dest2[2].hobbies[0] = "cycling";
    src2:  ["a",42,{"name":"terry","age":"old","hobbies":["sleeping","eating"]}] 
    dest2: ["a",42,{"name":"terry","age":"secret","hobbies":["cycling","eating"]}] 


Test3:
  let myMap = new Map();
  let keyString = "a string";
  let keyObj = {};
  let keyFunc = function () {};
  myMap.set(keyString, 'value associated with "a string"');
  myMap.set(keyObj, 'value associated with keyObj');
  myMap.set(keyFunc, 'value associated with keyFunc');
  let dest3 = deepCopy(myMap, true);
  dest3.delete(keyFunc);
    myMap: Map(3) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj',
  [Function: keyFunc] => 'value associated with keyFunc'
} 
    dest3: Map(2) {
  'a string' => 'value associated with "a string"',
  {} => 'value associated with keyObj'
}

Test4:
  let src4 = {nums: [1,5,[22,[[44]]]], map: myMap};
  let dest4 = deepCopy(src4, true);
  dest4.nums[2][0] = 220000;
    src4: {
  nums: [ 1, 5, [ 22, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
} 
    dest4: {
  nums: [ 1, 5, [ 220000, [Array] ] ],
  map: Map(3) {
    'a string' => 'value associated with "a string"',
    {} => 'value associated with keyObj',
    [Function: keyFunc] => 'value associated with keyFunc'
  }
}

Test5:
  let src5 = [1, 2, new Date(), 3];
  let dest5 = deepCopy(src5, true);
  dest5[2].setMonth(7);
    src5:  [ 1, 2, 2020-02-05T01:17:11.471Z, 3 ] 
    dest5: [ 1, 2, 2020-08-05T00:17:11.471Z, 3 ]

Test6:
  let src6 = new Set([1,"a",2,{foo: "bar"}]);
  let dest6 = deepCopy(src6, true);
  dest6.add("new stuff");
    src6:  Set(4) { 1, 'a', 2, { foo: 'bar' } } 
    dest6: Set(5) { 1, 'a', 2, { foo: 'bar' }, 'new stuff' }

Test7:
  let src7 = new Date();
  let dest7 = deepCopy(src7, true);
  dest7.setMonth(7);
    src7:  2020-02-05T01:17:11.484Z 
    dest7: 2020-08-05T00:17:11.484Z

Test8:
  let src8 = ["maptest", new Map()];
  src8[1].set("fooFn", function foo() {console.log("this is foo")});
  let dest8 = deepCopy(src8, true);
  dest8[1].set("barStr", "this is bar");
    src8:  [ 'maptest', Map(1) { 'fooFn' => [Function: foo] } ] 
    dest8: [
  'maptest',
  Map(2) { 'fooFn' => [Function: foo], 'barStr' => 'this is bar' }
]
this is foo

Test9:
  let src9 = {foo: "this is foo", bar: "this is bar"};
  Object.defineProperty(src9, "foo", {enumerable: false});
  let dest9 = deepCopy(src9, true);
    src9:  { bar: 'this is bar' } 
    dest9: { bar: 'this is bar' }
dest9.foo descriptor: {
  value: 'this is foo',
  writable: true,
  enumerable: false,
  configurable: true
}

Test10:
  let src10 = [1,2,/abc/,"foo"];
  let dest10 = deepCopy(src10, ${DEEP});
  dest10[3] = "BAR";
    src10:  [ 1, 2, /abc/, 'foo' ] 
    dest10: [ 1, 2, /abc/, 'BAR' ]

Test11:
  let src11 = [ 1, 2, Int8Array.from([3, 4, 42]) ];
  let dest11 = deepCopy(src11, true);
  dest11[1] = 200000;
    src11:  [ 1, 2, Int8Array [ 3, 4, 42 ] ] 
    dest11: [ 1, 200000, Int8Array [ 3, 4, 42 ] ]

Test12:
  let src12 = [ 1, 2, Uint8Array.from([3, 4, 42]) ];
  let dest12 = deepCopy(src12, true);
  dest12[1] = 200000;
    src12:  [ 1, 2, Uint8Array [ 3, 4, 42 ] ] 
    dest12: [ 1, 200000, Uint8Array [ 3, 4, 42 ] ]

Test13:
  let src13 = [ 1, 2, Uint8ClampedArray.from([3, 4, 42]) ];
  let dest13 = deepCopy(src13, true);
  dest13[1] = 42424242;
    src13:  [ 1, 2, Uint8ClampedArray [ 3, 4, 42 ] ] 
    dest13: [ 1, 42424242, Uint8ClampedArray [ 3, 4, 42 ] ]

Test14:
  let src14 = [ 1, 2, Int16Array.from([3, 4, 42]) ];
  let dest14 = deepCopy(src14, true);
  dest14[1] = 16181618;
    src14:  [ 1, 2, Int16Array [ 3, 4, 42 ] ] 
    dest14: [ 1, 16181618, Int16Array [ 3, 4, 42 ] ]

Test15:
  let src15 = [ 1, 2, Uint16Array.from([3, 4, 42]) ];
  let dest15 = deepCopy(src15, true);
  dest15[1] = 16181618;
    src15:  [ 1, 2, Uint16Array [ 3, 4, 42 ] ] 
    dest15: [ 1, 16181618, Uint16Array [ 3, 4, 42 ] ]

Test16:
  let src16 = [ 1, 2, Int32Array.from([3, 4, 42]) ];
  let dest16 = deepCopy(src16, true);
  dest16[1] = 16181618;
    src16:  [ 1, 2, Int32Array [ 3, 4, 42 ] ] 
    dest16: [ 1, 16181618, Int32Array [ 3, 4, 42 ] ]

Test17:
  let src17 = [ 1, 2, Uint32Array.from([3, 4, 42]) ];
  let dest17 = deepCopy(src17, true);
  dest17[1] = 16181618;
    src17:  [ 1, 2, Uint32Array [ 3, 4, 42 ] ] 
    dest17: [ 1, 16181618, Uint32Array [ 3, 4, 42 ] ]

Test18:
  let src18 = [ 1, 2, Float32Array.from([3, 4, 42]) ];
  let dest18 = deepCopy(src18, true);
  dest18[1] = 16181618;
    src18:  [ 1, 2, Float32Array [ 3, 4, 42 ] ] 
    dest18: [ 1, 16181618, Float32Array [ 3, 4, 42 ] ]

Test19:
  let src19 = [ 1, 2, Float64Array.from([3, 4, 42]) ];
  let dest19 = deepCopy(src19, true);
  dest19[1] = 16181618;
    src19:  [ 1, 2, Float64Array [ 3, 4, 42 ] ] 
    dest19: [ 1, 16181618, Float64Array [ 3, 4, 42 ] ]

Test20:
  let src20 = [ 1, 2, BigInt64Array.from([3n, 4n, 42n]) ];
  let dest20 = deepCopy(src20, true);
  dest20[1] = 16181618;
    src20:  [ 1, 2, BigInt64Array [ 3n, 4n, 42n ] ] 
    dest20: [ 1, 16181618, BigInt64Array [ 3n, 4n, 42n ] ]

Test21:
  let src21 = [ 1, 2, BigUint64Array.from([3n, 4n, 42n]) ];
  let dest21 = deepCopy(src21, true);
  dest21[1] = 16181618;
    src21:  [ 1, 2, BigUint64Array [ 3n, 4n, 42n ] ] 
    dest21: [ 1, 16181618, BigUint64Array [ 3n, 4n, 42n ] ]

Elapsed time: 29 milliseconds
